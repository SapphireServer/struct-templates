typedef ubyte uint8_t;
typedef byte int8_t;

typedef ushort uint16_t;
typedef short int16_t;

typedef uint uint32_t;
typedef int int32_t;

typedef uint64 uint64_t;
typedef int64 int64_t;

struct TMLB
{
  int32_t magic;
  uint32_t size;
  uint32_t entryCount;
} tmlb <bgcolor=cLtGreen>;

local int count = tmlb.entryCount;
local int pos = 0;
local string type;

// avfx
void readFloatPairShit(int offset, int count, int i)
{
  local int j;
  for(j = 0; j < count; j++)
  {
    Printf("  - pair %i entry %i, val: %f\n", i, j, ReadFloat(offset + (j * 4)));
  }
}

void parseAvfx()
{
  struct AVFXEntry
  {
    uint32_t unk[3] ;
    uint32_t pathOffset <bgcolor=cLtGreen>;
    uint32_t unk2[2];
    struct SomePairShittery
    {
      uint32_t offset;
      uint32_t count;
    } pairs[5] <bgcolor=cLtGreen>;
  } entry;

  // all this garbage begins from the avfx entry offset, not the header
  Printf(" avfx: %s\n", ReadString(pos + 8 + entry.pathOffset));

  Printf(" pairs shit:\n");
  local int i = 0;
  for(i = 0; i < 5; i++)
  {
    readFloatPairShit(pos + 8 + entry.pairs[i].offset, entry.pairs[i].count, i);
  }
}

void FUCKSE(int base, int size)
{
  Printf(" - @ %x, len: %x\n", base, size);
  local int i;
  local int d;
  for(i = base; i < base + size; i += 4)
  {
    d = ReadInt(i);
    Printf("   - offset: %x, data: %x, str: %s\n", i, d, ReadString(base + d));
  }
}

void parseAnim()
{
  struct AnimEntry
  {
    uint32_t unk[6];
    uint32_t animNameOffset <bgcolor=cLtGreen>;
    uint32_t unk2;
  } entry;
  
  Printf(" anim: %s\n", ReadString(pos + 8 + entry.animNameOffset));
}

while(count--)
{
  pos = FTell();
  type = ReadString(pos, 4);

  Printf("at pos %x, type: %s\n", pos, type);

  struct EntryHeader
  {
    char type[4];
    int32_t entrySize;
  } header <bgcolor=cLtGreen>;
  
  if(type == "TMDH")
  {
    struct TMDH
    {
      uint16_t id;
      uint16_t unk;
      uint32_t unk2[2];
    } entry;
  }
  else if(type == "TMTR")
  {
    struct TMTR
    {
      uint16_t id;
      uint16_t unk;
      uint32_t unk2[3];
    } entry;
  }
  else if(type == "C012")
  {
    parseAvfx();
  }
  else if(type == "C010")
  {
    parseAnim();
  }
  else if(type == "C006")
  {
    struct C006 {
      uint32_t unk[4];
    } entry;
  }
  else if(type == "C063")
  {
    struct SCDEntry {
      uint32_t unk;
      uint32_t unk2[2];
      uint32_t scdPathOffset;
      uint32_t unk3[2];
    } entry;

    Printf(" scd: %s\n", ReadString(pos + 8 + entry.scdPathOffset));
  }
  //else FUCKSE(pos + 8, header.entrySize - 8);

  FSeek(pos + header.entrySize);
}