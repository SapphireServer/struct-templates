typedef ubyte uint8_t;
typedef byte int8_t;

typedef ushort uint16_t;
typedef short int16_t;

typedef uint uint32_t;
typedef int int32_t;

typedef uint64 uint64_t;
typedef int64 int64_t;

enum LgbEntryType
{
  BgParts = 1,
  Light = 3,
  Vfx = 4,
  PositionMarker = 5,
  Gimmick = 6,
  SharedGroup6 = 6,// secondary variable is set to 2
  Sound = 7,
  EventNpc = 8,
  BattleNpc = 9,
  Aetheryte = 12,
  EnvSpace = 13,
  Gathering = 14,
  SharedGroup15 = 15,// secondary variable is set to 13
  Treasure = 16,
  Weapon = 39,
  PopRange = 40,
  ExitRange = 41,
  MapRange = 43,
  NaviMeshRange = 44,
  EventObject = 45,
  EnvLocation = 47,
  EventRange = 49,
  QuestMarker = 51,
  CollisionBox = 57,
  DoorRange = 58,
  LineVfx = 59,
  ClientPath = 65,
  ServerPath = 66,
  GimmickRange = 67,
  TargetMarker = 68,
  ChairMarker = 69,
  ClickableRange = 70,
  PrefetchRange = 71,
  FateRange = 72,
  SphereCastRange = 75,

  Group = 256
};

struct SE_COMMON_FILE_SUBHEADER
{
    char magic[4];
    uint32_t entryCount;
};

struct SE_COMMON_FILE_HEADER
{
    char magic[4];
    uint32_t fileSize;
    uint32_t version;
    SE_COMMON_FILE_SUBHEADER subHeader;
}fileHdr <bgcolor=0x00aa00>;;

typedef SE_COMMON_FILE_HEADER SGB_FILE_HEADER;

struct SGB_ROOT_ENTRY
{
  uint32_t dataOffset;
  uint32_t groupCount;
  uint32_t groupOffset;
  uint32_t unknowns[8];

} rootEntry <bgcolor=0x00ffff>;

struct SGB_GROUP_HEADER
{
  LgbEntryType type;
  int32_t nameOffset;
  uint32_t unknown08;
  uint32_t unknown0C;

  uint32_t unknown10;
  uint32_t unknown14;
  uint32_t unknown18;
  uint32_t unknown1C;

  int32_t entryCount;
  uint32_t unknown24;
  uint32_t unknown28;
  uint32_t unknown2C;

  uint32_t unknown30;
  uint32_t unknown34;
  uint32_t unknown38;
  uint32_t unknown3C;

  uint32_t unknown40;
  uint32_t unknown44;
};

struct vec3
{
    float x, y, z;
};

struct SGB_ENTRY_HEADER
{
  LgbEntryType type;
  uint32_t unknown;
  uint32_t nameOffset;
  vec3 translation;
  vec3 rotation;
  vec3 scale;
};

struct SGB_BGPARTS_HEADER
{
  SGB_ENTRY_HEADER lgbHeader;
  uint32_t modelFileOffset;
  uint32_t collisionFileOffset;
  uint32_t unknown4;
  uint32_t unknown5;
  uint32_t unknown6;
  uint32_t unknown7;
  uint32_t unknown8;
  uint32_t unknown9;
  uint32_t unknown10;
  uint32_t unknown11;
  float unknown12; 
};

struct SGB_GIMMICK_HEADER
{
  SGB_ENTRY_HEADER lgbHeader;
  uint32_t gimmickFileOffset;
  uint32_t unknown4;
  uint32_t someEntryOffset;
  uint32_t someEntryCount2;
  uint32_t unknown5;
  uint32_t unknown6;
  uint32_t unknown7;
  uint32_t unknown8;
  uint32_t unknown9;
  uint32_t unknown10;
  uint32_t unknown11;
  //uint32_t entryOffsets[someEntryCount2];
};

struct SGB_GIMMICK_SUBENTRY
{
   uint32_t someType; // or id?
   uint32_t unknown;
   uint32_t unknown;
};

struct SGB_OBSET_ENTRY
{
  LgbEntryType type;
  uint32_t id;
  uint32_t nameOffset;
};


struct SGB_GROUP_SUBENTRY2
{
  LgbEntryType type;
  uint32_t id;
  uint32_t nodeOffset;
};

struct SGB_GROUP_SUBENTRY2_NODEPTR
{
   uint32_t id;
   uint32_t unknown;
   uint32_t unknown2;
};

struct StringStruct
{
   string str;
};

struct SGB_STATE_ENTRY
{
    
};

struct SGB_OFFSET1C_HEADER
{
   LgbEntryType Type;
   int NameOffset;
   uint Unknown08;

   int EntryCount;
   uint Unknown14;
   int ModelFileOffset;
   vec3 UnknownFloat3;
   vec3 UnknownFloat3_2;
   int StateOffset;
   int ModelFileOffset2;
   uint Unknown3;
   float Unknown4;
   int NameOffset2;
   vec3 UnknownFloat3_3;
};



void FindGroupEntries(SGB_GROUP_HEADER& group)
{
    Printf("group = %d, entries = %d\n", group.unknown08, group.entryCount);

    local int baseOffset = FTell();

    local int i;
    local int entryOffset;
    local int curPos = baseOffset;
    local int type;
    
    local int ptrVal;
    
    for(i = 0; i < group.entryCount; i++)
    {
        curPos = baseOffset + (i * 4);
        Printf("currPos = %x\n", curPos);
        FSeek(curPos);
        entryOffset = baseOffset + ReadInt();

        Printf("entry = %d, offset = %x\n", i, entryOffset);
        
        FSeek(entryOffset);

        type = ReadInt();

        if(type == 1)
        {
            SGB_BGPARTS_HEADER bgEntry <bgcolor=0x777700>;
            //if (entry.lgbHeader.unknown != 0)
            //    Printf("type = %d entry = %d, offset = %x id = %d\n", type, i, entryOffset, entry.lgbHeader.unknown);
        }
        else if(type == 6)
        {
            SGB_GIMMICK_HEADER entry <bgcolor=0x00ff00>;
            //if (entry.lgbHeader.unknown != 0)
            //    Printf("type = %d entry = %d, offset = %x id = %d\n", type, i, entryOffset, entry.lgbHeader.unknown);
        }
        else if (type == 256)
        {
            Printf("FUCK\n");
            //SGB_GR
        }
        else
        {
            SGB_ENTRY_HEADER entry <bgcolor=0x0000ff>;
            //if (entry.unknown != 0)
            //    Printf("type = %d entry = %d, offset = %x id = %d\n", type, i, entryOffset, entry.unknown);
        }
    }
} 

void FindGroups()
{

    local int i;
    local int groupOffset;

    local int baseOffset = FTell();
    local int curPos = baseOffset;

    for(i = 0; i < rootEntry.groupCount; i++)
    {
        curPos = baseOffset + (i * 4);
        FSeek(curPos);
        groupOffset = baseOffset + ReadInt();
    
        //Printf("id = %d, pos = %x, offset = %x\n", i, curPos, groupOffset);
    
        FSeek(groupOffset);
    
        SGB_GROUP_HEADER group <bgcolor=0x00aaff>;

        FindGroupEntries(group);
        
        FSeek(curPos);
    }
}

//FindGroups();
FSeek(sizeof(SE_COMMON_FILE_HEADER));
FindGroups();